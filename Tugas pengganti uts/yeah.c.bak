#define SWITCH_PORT PORTC
#define SWITCH0_BIT PC0
#define SENSE_PORTC PINC

#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>

volatile int16_t counter = 0;

typedef struct{
	uint16_t waktuJalan;
	uint8_t timeout;
	void (*fungsi)();
}struk;

struk hola[];

uint8_t lampu = 0b11111110;
uint8_t flag = 0b1;

int main(){

	DDRA = 0xff;
	SWITCH_PORT |= _BV(SWITCH0_BIT);

	TCCR0 |= (1 << WGM01);

	TIMSK |= (1 << OCIE0);

	sei();

	OCR0 = 187;

	TCCR0 |= (1 << CS01) | (1 << CS00);

	hola = {
		{0,65,srf},
		{0,100,led},
		{0,100,tombol}
	}

	while(1){
		for (int i = 0; i < sizeof(hola); i++)
		{
			if (counter>=hola[i].waktuJalan)
			{
				hola[i].fungsi();
				hola[i].waktuJalan = counter+timeout;
			}
		}
	}
	
}

ISR(TIMER0_COMP_vect){
	//PORTA = ~PORTA;
	if (OCR0 == 186)
	{
		OCR0 = 187;
	}else if (OCR0 == 187)
	{
		OCR0 = 186;
	}
	counter++;
}

void srf(){
	return;
}

void led(){
	PORTA = lampu;

	if (flag)
	{
		if (lampu == 0b01111111)
		{
			flag = 0b0;
			lampu = (lampu >> 1) | 0b10000000;
		}else{
			lampu = (lampu << 1) | 1;
		}	
	}else{
		if (lampu == 0b11111110)
		{
			flag = 0b1;
			lampu = (lampu << 1) | 1;
		}else{
			lampu = (lampu >> 1) | 0b10000000;
		}
	}
	return;

}

void tombol(){
	if (bit_is_clear(SENSE_PORTC, SWITCH0_BIT))
	{
		_delay_ms(DEBOUNCE_TIME);
		if (bit_is_clear(SENSE_PORTC, SWITCH0_BIT))
		{
			//kepencet
		}
	}
	return; //nope
}